(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{400:function(t,s,a){"use strict";a.r(s);var e=a(45),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"git"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git"}},[t._v("#")]),t._v(" Git")]),t._v(" "),a("h2",{attrs:{id:"基本操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本操作"}},[t._v("#")]),t._v(" 基本操作")]),t._v(" "),a("h3",{attrs:{id:"创建版本库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建版本库"}},[t._v("#")]),t._v(" 创建版本库")]),t._v(" "),a("p",[t._v("版本库又称为仓库，其实可以简单的理解成就是一个目录。而这个目录下的所有文件都可以被 "),a("code",[t._v("Git")]),t._v(" 管理起来。")]),t._v(" "),a("p",[a("strong",[t._v("创建一个版本库")])]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 新建一个文件夹")]),t._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("mkdir")]),t._v(" newfolder\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 进入新建的这个文件夹 ")]),t._v("\n$ "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" newfolder\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 新建一个 git 仓库 ")]),t._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" init \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 创建成功的输出")]),t._v("\n-"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" Initialized empty Git repository "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" /Users/taoziyang/Desktop/projects/git/newfolder/.git/\n")])])]),a("h3",{attrs:{id:"把文件添加到版本库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#把文件添加到版本库"}},[t._v("#")]),t._v(" 把文件添加到版本库")]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("版本控制系统可以告诉你某个文件每次的改动，比如这次在哪个文件的第几行的第几列新增了一个什么单词。虽然像图片或者视频这种二进制文件也可以交由版本控制系统来管理，但是版本控制系统是无法追踪二进制文件的文件变化的，他只能知道这次和上次的文件大小的对比，具体修改了什么内容是无法知道的。"),a("code",[t._v("word")]),t._v(" 文档就是一个二进制文件。")])]),t._v(" "),a("p",[t._v("1、首先我们在上面新建的 "),a("code",[t._v("newfolder")]),t._v(" 文件夹下新增一个 "),a("code",[t._v("readme.md")]),t._v(" 文件，并写下一些内容")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("mkdir")]),t._v(" readme.md\n")])])]),a("p",[t._v("2、然后使用命令将该文件"),a("code",[t._v("添加")]),t._v("到仓库，如果有多个需要提交的文件可多次执行该命令")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" readme.md\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" name.md\n")])])]),a("p",[t._v("3、接着再使用命令将文件"),a("code",[t._v("提交")]),t._v("到仓库，后面引号中间的文字为注释，尽量写得有意义些，能为后面准确追溯提供便利。一次"),a("code",[t._v("commit")]),t._v("命令会将之前所有的"),a("code",[t._v("add")]),t._v("命令全部提交。")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -m "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'新增readme文件'")]),t._v("\n\n-"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 输出，一个文件改动，新增了一行内容")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("master "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("root-commit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" be042ef"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" new txt\n "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("file")]),t._v(" changed, "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" insertion"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("+"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n create mode "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100644")]),t._v(" readme.txt\n")])])]),a("h2",{attrs:{id:"版本控制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#版本控制"}},[t._v("#")]),t._v(" 版本控制")]),t._v(" "),a("h3",{attrs:{id:"查看当前版本库的状态"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查看当前版本库的状态"}},[t._v("#")]),t._v(" 查看当前版本库的状态")]),t._v(" "),a("p",[t._v("我修改了上面的"),a("code",[t._v("readme.md")]),t._v("文件，在里面新增了一句话。这时候可以使用命令查看当前版本库的状态。")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" status\n\n-"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 输出")]),t._v("\nOn branch master\nChanges not staged "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" commit:\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("use "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"git add <file>..."')]),t._v(" to update what will be committed"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("use "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"git checkout -- <file>..."')]),t._v(" to discard changes "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" working directory"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n\tmodified:   readme.md\n\nno changes added to commit "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("use "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"git add"')]),t._v(" and/or "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"git commit -a"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("从输出中可以看到当前有一个叫 "),a("code",[t._v("readme.md")]),t._v(" 的文件有修改过，但是还没有提交修改。")]),t._v(" "),a("h3",{attrs:{id:"查看文件修改的细节"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查看文件修改的细节"}},[t._v("#")]),t._v(" 查看文件修改的细节")]),t._v(" "),a("p",[t._v("执行该命令可以看到修改的文件具体修改的内容。")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("diff")]),t._v(" readme.md\n\n-"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 输出")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("diff")]),t._v(" --git a/readme.txt b/readme.txt\nindex 13a93de"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("ffa1b44 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100644")]),t._v("\n--- a/readme.txt\n+++ b/readme.txt\n@@ -1 +1,3 @@\n-测试测试测试测试\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v(" No newline at end of "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("file")]),t._v("\n+测试测试测试测试\n+\n+这又是一行测试\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v(" No newline at end of "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("file")]),t._v("\n")])])]),a("p",[t._v("从输出中可以看到新增了一行内容。")]),t._v(" "),a("p",[t._v("这时候可以使用之前的"),a("code",[t._v("add")]),t._v("命令将文件添加到版本库，然后使用"),a("code",[t._v("status")]),t._v("命令查看当前版本库的状态。")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" readme.md\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" status\n\n-"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 输出")]),t._v("\nOn branch master\nChanges to be committed:\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("use "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"git reset HEAD <file>..."')]),t._v(" to unstage"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n\tmodified:   readme.md\n")])])]),a("p",[t._v("输出中可以看到，"),a("code",[t._v("readme.md")]),t._v("将要被提交")]),t._v(" "),a("p",[t._v("然后使用"),a("code",[t._v("commit")]),t._v("命令将文件提交到版本库，然后再次使用"),a("code",[t._v("status")]),t._v("命令查看当前版本库的状态。")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -m "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'新增测试内容'")]),t._v("\n\n-"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 输出")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("master e475afc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" distributed\n "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("file")]),t._v(" changed, "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" insertion"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("+"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(", "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" deletion"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("-"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" status\n\n-"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 输出")]),t._v("\nOn branch master\nnothing to commit, working tree clean\n")])])]),a("p",[a("code",[t._v("status")]),t._v("命令的输出中可以看到，已经没有文件要提交了，工作目录是干净的。说明刚才的文件已经提交上去了。")]),t._v(" "),a("h3",{attrs:{id:"查看-git-的-log"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查看-git-的-log"}},[t._v("#")]),t._v(" 查看 git 的 log")]),t._v(" "),a("p",[t._v("使用一下命令即可查看 "),a("code",[t._v("git")]),t._v(" 的 "),a("code",[t._v("log")]),t._v(" 日志")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log\n")])])]),a("p",[t._v("但是上面这种方法会有一个问题，就是会输出非常长的一串，如果你只是想查询 "),a("code",[t._v("commit")]),t._v(" 编号的话可以在 "),a("code",[t._v("log")]),t._v(" 后添加一个参数。输出的内容里面前面那些看似乱码是 "),a("code",[t._v("commit")]),t._v(" 的ID，一串由SHA1计算出来的非常大的数字，用十六进制表示。后面是你提交的时候写的注释。")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log --pretty"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("oneline\n\n-"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#输出")]),t._v("\nb128fee08cc9e4d0626186ae554c387ad2e5af60 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("HEAD -"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" master"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 第三次测试\n7d1c0059f941a601b245a9e8383805dd38ea51e7 第二次测试\n32e6487ef89d4d784ec191ab07c68d559d937da5 新增测试一行\nbe042ef9b8b2d01265a6eddf16b4e21014022faf new txt\n")])])]),a("h3",{attrs:{id:"版本回退"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#版本回退"}},[t._v("#")]),t._v(" 版本回退")]),t._v(" "),a("h4",{attrs:{id:"如何回退到上一个版本"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何回退到上一个版本"}},[t._v("#")]),t._v(" 如何回退到上一个版本？")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset --hard HEAD^\n")])])]),a("p",[t._v("前面的参数都是标准参数，只有最后一个 "),a("code",[t._v("HEAD")]),t._v(" 。"),a("br"),t._v(" "),a("code",[t._v("git")]),t._v(" 里的 "),a("code",[t._v("HEAD")]),t._v(" 其实就是指针。"),a("code",[t._v("HEAD")]),t._v(" 指向哪个 "),a("code",[t._v("commit")]),t._v("， 就代表当前是哪个版本。"),a("br"),t._v("\n而 "),a("code",[t._v("HEAD")]),t._v(" 后面跟着的 "),a("code",[t._v("^")]),t._v(" 符号意思就是表示上个版本，如果要回退到上上个版本，那就是 "),a("code",[t._v("^^")]),t._v(" 两个符号。"),a("br"),t._v("\n如果是一个很大的数字可以使用以下命令。")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset --hard HEAD~100 "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 100 就是指前一百个版本")]),t._v("\n")])])]),a("h4",{attrs:{id:"其实我们可以指定-commit-版本号进行回退。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#其实我们可以指定-commit-版本号进行回退。"}},[t._v("#")]),t._v(" 其实我们可以指定 "),a("code",[t._v("commit")]),t._v(" 版本号进行回退。")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 先查询确定要回退的版本号")]),t._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 确认版本号后执行命令")]),t._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset --hard 32e6487ef89d4d784ec191ab07c68d559d937da5\n")])])]),a("p",[t._v("后面的版本号可以不全部填写，只复制前几位也是可以的，"),a("code",[t._v("git")]),t._v(" 会自动在当前版本库内匹配。")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("需要注意的是，执行版本回退命令同时会让 "),a("code",[t._v("log")]),t._v(" 日志也回退，导致我们使用 "),a("code",[t._v("log")]),t._v(" 命令就无法查看到我们回退之前，即对于现在来说未来的那些版本号。")])]),t._v(" "),a("p",[t._v("为了解决这个问题，你可以向上翻找之前的 "),a("code",[t._v("commit")]),t._v(" 版本号，或者执行下面这个命令。这个命令会记录下你每一次命令和每一个 "),a("code",[t._v("commit")]),t._v(" 版本号。")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reflog\n\n-"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 输出")]),t._v("\nb128fee "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("HEAD -"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" master"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" HEAD@"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(": reset: moving to b128fee08\n7d1c005 HEAD@"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(": reset: moving to HEAD^\nb128fee "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("HEAD -"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" master"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" HEAD@"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(": commit: 第三次测试\n7d1c005 HEAD@"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(": commit: 第二次测试\n32e6487 HEAD@"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(": commit: 新增测试一行\nbe042ef HEAD@"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(": commit "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("initial"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(": new txt\n")])])]),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("所以一定要写清楚每一条 "),a("code",[t._v("commit")]),t._v(" 注释，特别是有比较重要改动的时候！")])]),t._v(" "),a("h3",{attrs:{id:"git-工作区、暂存区"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-工作区、暂存区"}},[t._v("#")]),t._v(" Git 工作区、暂存区")]),t._v(" "),a("p",[t._v("首先先看一张图\n"),a("img",{attrs:{src:t.$withBase("/tools/git/git-stage.jpg")}})]),t._v(" "),a("ul",[a("li",[t._v("工作区是指你 "),a("code",[t._v("git init")]),t._v(" 的那个根目录，用来存放你所有的代码。")]),t._v(" "),a("li",[t._v("工作区内有一个隐藏的文件夹 "),a("code",[t._v(".git")]),t._v(" ，这个是 "),a("code",[t._v("git")]),t._v(" 版本库，用来存放所有 "),a("code",[t._v("git")]),t._v(" 相关的内容。")]),t._v(" "),a("li",[t._v("版本库内有一个称为 "),a("code",[t._v("stage")]),t._v(" 或者 "),a("code",[t._v("index")]),t._v(" 的暂存区，用来暂存从工作区 "),a("code",[t._v("add")]),t._v(" 提交上来的内容。")]),t._v(" "),a("li",[t._v("版本库内还有分支，而在 "),a("code",[t._v("git init")]),t._v(" 的时候就会新建一个默认主分支 "),a("code",[t._v("master")]),t._v("。")]),t._v(" "),a("li",[a("code",[t._v("HEAD")]),t._v(" 是指针，他的指向就是当前的分支。")]),t._v(" "),a("li",[a("code",[t._v("commit")]),t._v(" 命令就是将 "),a("code",[t._v("stage")]),t._v(" 内所有的内容提交到当前分支。")]),t._v(" "),a("li",[t._v("每次修改，如果不使用 "),a("code",[t._v("add")]),t._v(" 命令将内容提交到 "),a("code",[t._v("stage")]),t._v(" 暂存区，那就不会加入到 "),a("code",[t._v("commit")]),t._v(" 中。")])]),t._v(" "),a("h3",{attrs:{id:"撤销修改"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#撤销修改"}},[t._v("#")]),t._v(" 撤销修改")]),t._v(" "),a("p",[t._v("该命令可以撤销修改")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout -- readme.md\n")])])]),a("p",[t._v("撤销修改会有两种情况")]),t._v(" "),a("ul",[a("li",[t._v("你有修改，但是还没有提交到暂存区，那么撤销修改后工作区的内容会和版本库内完全一致。")]),t._v(" "),a("li",[t._v("你有修改，已经提交到暂存区，且又修改了内容，那么撤销修改后工作区的内容就会回到你上一次添加暂存区后的状态。")])]),t._v(" "),a("p",[t._v("但是这个撤销好像没什么用啊！我已经提交到暂存区的内容该怎么撤回？"),a("br"),t._v("\n这时候就用到下面这个命令了。他可以将暂存区的内容重新扔回工作区")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset HEAD readme.md\n")])])]),a("p",[t._v("然后再使用 "),a("code",[t._v("checkout")]),t._v(" 那条命令就可以完全撤回了。")]),t._v(" "),a("p",[t._v("你过你已经把内容提交到分支内了该怎么办？往上翻，上面有版本回退！")]),t._v(" "),a("h3",{attrs:{id:"关联远程库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#关联远程库"}},[t._v("#")]),t._v(" 关联远程库")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 关联")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" origin https://github.com/lambortao/gitstudy.git\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 第一次提交")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push -u origin master\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 以后提交")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push origin master\n")])])]),a("p",[t._v("如果远程仓库是空的，那在我们第一次提交的时候要加上一个 "),a("code",[t._v("-u")]),t._v(" 参数，他的意思是 "),a("code",[t._v("git")]),t._v(" 会把本地 "),a("code",[t._v("master")]),t._v(" 分支的内容提交到远程 "),a("code",[t._v("master")]),t._v(" 分支，并且会将他们两个关联起来，在以后推送或者拉取的时候就可以简化命令不加这个 "),a("code",[t._v("-u")]),t._v(" 了。")]),t._v(" "),a("h3",{attrs:{id:"克隆远程库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#克隆远程库"}},[t._v("#")]),t._v(" 克隆远程库")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" clone https://github.com/lambortao/gitstudy.git\n")])])]),a("h2",{attrs:{id:"分支"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分支"}},[t._v("#")]),t._v(" 分支")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("分支就是在版本库中新建一个属于自己的版本库，这样既不会影响到主分支 "),a("code",[t._v("master")]),t._v(" 的代码，也不用承担不能提交到 "),a("code",[t._v("master")]),t._v(" 带来的丢失代码的风险。在分支的代码编写完毕后，就可以直接合并到主分支。")])]),t._v(" "),a("p",[a("code",[t._v("Git")]),t._v(" 提交的过程就像是一条时间线，而这条时间线就是分支。"),a("code",[t._v("git")]),t._v(" 默认会创建一条主时间线，就是 "),a("code",[t._v("master")]),t._v(" 分支。每次提交，时间线就会前进一步，就是分支向前前进一步。\n"),a("br"),t._v(" "),a("br"),t._v("\n但是我们有时候会需要开发一个新的功能，而又不想这个新功能影响 "),a("code",[t._v("master")]),t._v(" 分支。那这个时候就需要新建分支去完成这个新的功能。")]),t._v(" "),a("h5",{attrs:{id:"新建一个-dev-分支-并使用-b-参数切换过去"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#新建一个-dev-分支-并使用-b-参数切换过去"}},[t._v("#")]),t._v(" 新建一个 "),a("code",[t._v("dev")]),t._v(" 分支，并使用 "),a("code",[t._v("-b")]),t._v(" 参数切换过去")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout -b dev\n")])])]),a("p",[t._v("执行了上面这个操作后，"),a("code",[t._v("git")]),t._v(" 就会新建出这个分支，并且将 "),a("code",[t._v("HEAD")]),t._v(" 指针指向 "),a("code",[t._v("dev")]),t._v(" 分支。"),a("br"),t._v("\n这时候再次提交内容的话，"),a("code",[t._v("dev")]),t._v(" 分支就会脱离原本的 "),a("code",[t._v("master")]),t._v(" 分支的时间线，走自己的道路。而 "),a("code",[t._v("master")]),t._v(" 分支保存不变。\n"),a("br"),t._v(" "),a("br")]),t._v(" "),a("p",[t._v("在你完成这条分支的任务后，你可以把它合并到 "),a("code",[t._v("master")]),t._v(" 分支上面去。")]),t._v(" "),a("h5",{attrs:{id:"查看分支命令-星号代表当前分支"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查看分支命令-星号代表当前分支"}},[t._v("#")]),t._v(" 查看分支命令，星号代表当前分支")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch\n\n-"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#输出")]),t._v("\n  dev\n* master\n")])])]),a("p",[t._v("先切换到 "),a("code",[t._v("master")]),t._v(" 分支，再执行命令。")]),t._v(" "),a("h5",{attrs:{id:"合并分支"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#合并分支"}},[t._v("#")]),t._v(" 合并分支")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" merge dev\n\n-"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 输出")]),t._v("\nAlready up to date.\n")])])]),a("p",[a("code",[t._v("git")]),t._v(" 合并分支的速度非常的快，因为他并没有合并任何文件，而只是把滞后的 "),a("code",[t._v("master")]),t._v(" 分支直接指向了 "),a("code",[t._v("dev")]),t._v(" 分支。这种合并方式又叫 "),a("code",[t._v("fast forward")]),t._v("，他有一个问题，就是删除这条分支后就看不到这条分支的任何信息了。\n"),a("br")]),t._v(" "),a("p",[t._v("这时候可以加一个参数禁用 "),a("code",[t._v("fast forward")]),t._v("。")]),t._v(" "),a("h5",{attrs:{id:"禁用-fast-forward"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#禁用-fast-forward"}},[t._v("#")]),t._v(" 禁用 "),a("code",[t._v("fast forward")])]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" merge --no--ff -m "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'合并分支'")]),t._v(" dev\n")])])]),a("p",[a("code",[t._v("--no--ff")]),t._v(" 就会禁用 "),a("code",[t._v("fast forward")]),t._v(" 模式，在禁用的时候合并就会新增一个 "),a("code",[t._v("commit")]),t._v(" 所以要加 "),a("code",[t._v("-m")]),t._v(" 参数写注释。\n"),a("br")]),t._v(" "),a("p",[t._v("合并分支后你就可以删掉这条分支了。")]),t._v(" "),a("h5",{attrs:{id:"删除分支"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#删除分支"}},[t._v("#")]),t._v(" 删除分支")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch -d dev\n\n-"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#输出")]),t._v("\nDeleted branch dev "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("was 54a64db"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(".\n")])])]),a("p",[t._v("下图大致展示了两条分支的时间线。其中左侧的蓝色线是 "),a("code",[t._v("master")]),t._v(" 分支。从中间分叉出去的黄色线就是 "),a("code",[t._v("dev")]),t._v(" 分支，可以看到，在黄色分支提交的那两次里，"),a("code",[t._v("master")]),t._v(" 分支是没有提交的。最后 "),a("code",[t._v("dev")]),t._v(" 分支合并到了 "),a("code",[t._v("master")]),t._v(" 分支。\n"),a("img",{attrs:{src:t.$withBase("/tools/git/branch.png")}})]),t._v(" "),a("h5",{attrs:{id:"切换分支的-switch-命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#切换分支的-switch-命令"}},[t._v("#")]),t._v(" 切换分支的 "),a("code",[t._v("switch")]),t._v(" 命令")]),t._v(" "),a("p",[t._v("相对于 "),a("code",[t._v("checkout")]),t._v(" ，"),a("code",[t._v("switch")]),t._v(" 从语义上来说更贴切切换分支的概念。")]),t._v(" "),a("h5",{attrs:{id:"使用-switch-命令生成并切换到-dev-分支"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用-switch-命令生成并切换到-dev-分支"}},[t._v("#")]),t._v(" 使用 "),a("code",[t._v("switch")]),t._v(" 命令生成并切换到 "),a("code",[t._v("dev")]),t._v(" 分支")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" switch -c dev\n")])])]),a("h5",{attrs:{id:"使用-switch-命令切换分支"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用-switch-命令切换分支"}},[t._v("#")]),t._v(" 使用 "),a("code",[t._v("switch")]),t._v(" 命令切换分支")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" switch master\n")])])]),a("h4",{attrs:{id:"冲突"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#冲突"}},[t._v("#")]),t._v(" 冲突")]),t._v(" "),a("p",[t._v("如果你在两个不同的分支修改了同样的内容，这时候再去提交或者合并的话，就出现代码冲突的提示。这时候就要手动的去删除代码后再去提交。\n"),a("br")]),t._v(" "),a("p",[t._v("使用 "),a("code",[t._v("git log")]),t._v(" 命令可以查看冲突文件的情况。\n也可以使用以下命令查看分支合并图。")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log --graph\n\n-"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 输出")]),t._v("\n\n*   commit 4b227a35d64e7b26be48f89049ea8fe2c037daf3 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("HEAD -"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" master, origin/master"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("  Merge: 2fd8de3 54a64db\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" Author: Tao Tao "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("lambortao@gmail.com"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" Date:   Sun Mar "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("22")]),t._v(":31:43 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2020")]),t._v(" +0800\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("     修复冲突\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" * commit 54a64dbb985ad91417050b83d524d0f24e089ca8\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" Author: Tao Tao "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("lambortao@gmail.com"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" Date:   Sun Mar "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("22")]),t._v(":28:20 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2020")]),t._v(" +0800\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("     第二次修改\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" * commit 07f6f233b11ba5a87c4f8f7cd5ef71d92e554d91\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" Author: Tao Tao "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("lambortao@gmail.com"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" Date:   Sun Mar "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("22")]),t._v(":25:37 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2020")]),t._v(" +0800\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("     dev分支\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" \n* "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" commit 2fd8de331d9729ce13e03c99af6eb850217318b8\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("/  Author: Tao Tao "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("lambortao@gmail.com"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("   Date:   Sun Mar "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("22")]),t._v(":26:41 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2020")]),t._v(" +0800\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("   \n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("       主分支上的修改\n\n")])])]),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("分支管理策略")]),t._v(" "),a("p",[t._v("在一般情况下，"),a("code",[t._v("master")]),t._v(" 分支应该是非常稳定的，只保留生产版本的代码。而我们所有的开发工作都应该是在 "),a("code",[t._v("dev")]),t._v(" 分支上，而我们每个人又都会有自己的分支。"),a("br"),t._v("我们要做的工作就是在自己的分支上干活，完成后合并到 "),a("code",[t._v("dev")]),t._v(" 分支，需要上线的时候，再将 "),a("code",[t._v("dev")]),t._v(" 分支合并到 "),a("code",[t._v("master")]),t._v(" 分支。")])]),t._v(" "),a("h3",{attrs:{id:"git-的隐藏代码功能"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-的隐藏代码功能"}},[t._v("#")]),t._v(" git 的隐藏代码功能")]),t._v(" "),a("p",[t._v("假设有这样一个场景，你本身在自己的分支上做自己的工作，这时突然来了一个任务，去修复 "),a("code",[t._v("master")]),t._v(" 分支上的一个 "),a("code",[t._v("bug")]),t._v("，这是一个紧急任务，你无法在需要完成自己手上的任务后再去修复，但是这时候又不好去提交 "),a("code",[t._v("commit")]),t._v("，因为你还没有完成你现在的这个工作。这时候你就可以使用 "),a("code",[t._v("git stash")]),t._v(" 命令将你当前的修改都隐藏起来。")]),t._v(" "),a("h5",{attrs:{id:"隐藏修改"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#隐藏修改"}},[t._v("#")]),t._v(" 隐藏修改")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash\n\n-"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 输出")]),t._v("\nSaved working directory and index state WIP on de: 4b227a3 修复冲突\n")])])]),a("p",[t._v("这时候你再使用 "),a("code",[t._v("status")]),t._v(" 命令查看，会发现工作区是干净的，你可以安心离开当前分支去完成紧急任务。\n"),a("br")]),t._v(" "),a("p",[t._v("当你完成紧急任务再切换到自己的分支后，可以使用命令查看被异常的任务。")]),t._v(" "),a("h5",{attrs:{id:"查看隐藏的修改"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查看隐藏的修改"}},[t._v("#")]),t._v(" 查看隐藏的修改")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash list\n\n-"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 输出")]),t._v("\nstash@"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(": WIP on de: 4b227a3 修复冲突\n")])])]),a("p",[t._v("使用以下命令恢复被隐藏的修改。")]),t._v(" "),a("h5",{attrs:{id:"恢复被隐藏的修改"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#恢复被隐藏的修改"}},[t._v("#")]),t._v(" 恢复被隐藏的修改")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash pop\n\n-"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 输出")]),t._v("\nOn branch de\nChanges not staged "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" commit:\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("use "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"git add <file>..."')]),t._v(" to update what will be committed"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("use "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"git checkout -- <file>..."')]),t._v(" to discard changes "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" working directory"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n\tmodified:   readme.txt\n\nno changes added to commit "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("use "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"git add"')]),t._v(" and/or "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"git commit -a"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nDropped refs/stash@"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("06cade40beaebcdc8334dd1f31fdf66ac4c806ac"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("你还可以多次使用 "),a("code",[t._v("git stash")]),t._v(" 命令来隐藏多个代码，在 "),a("code",[t._v("git stash list")]),t._v(" 的时候会看到每次 "),a("code",[t._v("stash")]),t._v(" 会有个代号，然后使用另外一个命令恢复指定的隐藏代码。")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash apply stash@"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("但是这个命令并不会在 "),a("code",[t._v("stash list")]),t._v(" 中删除这条信息，你需要手动删除他。")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash drop stash@"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h4",{attrs:{id:"复制修改"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#复制修改"}},[t._v("#")]),t._v(" 复制修改")]),t._v(" "),a("p",[t._v("假设你在 "),a("code",[t._v("master")]),t._v(" 分支上修复了一个 "),a("code",[t._v("bug")]),t._v(" ，因为 "),a("code",[t._v("dev")]),t._v(" 是早期映射的 "),a("code",[t._v("master")]),t._v(" 的代码，所以 "),a("code",[t._v("dev")]),t._v(" 上有同样的 "),a("code",[t._v("bug")]),t._v("，这时候可以找到你修复 "),a("code",[t._v("master")]),t._v(" 分支上时提交的那条 "),a("code",[t._v("commit")]),t._v(" ID，然后执行命令。")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 首先切换到你要修复问题的分支")]),t._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout dev \n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 然后复制那条修复问题的 commit ID")]),t._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" cherry-pick 4c805e2\n")])])]),a("p",[a("code",[t._v("git")]),t._v(" 会将你在 "),a("code",[t._v("master")]),t._v(" 上写的那段代码复制到 "),a("code",[t._v("dev")]),t._v(" 上来，同时在 "),a("code",[t._v("dev")]),t._v(" 上新生成一个 "),a("code",[t._v("commit")]),t._v("。")]),t._v(" "),a("h4",{attrs:{id:"删除一个没有合并的分支"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#删除一个没有合并的分支"}},[t._v("#")]),t._v(" 删除一个没有合并的分支")]),t._v(" "),a("p",[t._v("在开发一个不确定性很高的功能的时候，最好新建一个分支。如果这个功能不要了。就可以直接删除这个分支，而不影响到其他的东西。直接删除分支，比找着代码一行行的删除要方便的多。但是 "),a("code",[t._v("git")]),t._v(" 不允许删除一个未合并的分支，如果要强行删除的话需要带上大写的 "),a("code",[t._v("-D")]),t._v(" 参数。")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch -D dev\n")])])]),a("h3",{attrs:{id:"操作远程分支"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#操作远程分支"}},[t._v("#")]),t._v(" 操作远程分支")]),t._v(" "),a("h5",{attrs:{id:"查看远程分支"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查看远程分支"}},[t._v("#")]),t._v(" 查看远程分支")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote\n\n-"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 输出")]),t._v("\norigin\n")])])]),a("h5",{attrs:{id:"查看远程分支详细信息"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查看远程分支详细信息"}},[t._v("#")]),t._v(" 查看远程分支详细信息")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote -v\n\n-"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 输出")]),t._v("\norigin\thttps://github.com/lambortao/gitstudy.git "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fetch"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\norigin\thttps://github.com/lambortao/gitstudy.git "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("push"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("如果没有输出说明你没有权限。")]),t._v(" "),a("h5",{attrs:{id:"推送修改到远程分支"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#推送修改到远程分支"}},[t._v("#")]),t._v(" 推送修改到远程分支")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push origin master\n")])])]),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("从线上克隆仓库的时候，默认是指克隆 "),a("code",[t._v("master")]),t._v(" 分支的。")])]),t._v(" "),a("h5",{attrs:{id:"克隆其他远程分支到本地"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#克隆其他远程分支到本地"}},[t._v("#")]),t._v(" 克隆其他远程分支到本地")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout -b dev origin/dev\n")])])]),a("p",[t._v("这里 "),a("code",[t._v("-b dev")]),t._v(" 意思是在本地创建并切换到 "),a("code",[t._v("dev")]),t._v(" 分支，"),a("code",[t._v("origin/dev")]),t._v(" 的意思是和远程仓库的 "),a("code",[t._v("dev")]),t._v(" 分支做关联。\n"),a("br")]),t._v(" "),a("p",[t._v("在提交本地代码到远程库前，需要先将远程库的代码拉取到本地")]),t._v(" "),a("h5",{attrs:{id:"拉取远程库的代码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#拉取远程库的代码"}},[t._v("#")]),t._v(" 拉取远程库的代码")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" pull\n")])])]),a("p",[t._v("如果 "),a("code",[t._v("git pull")]),t._v(" 失败，提示 "),a("code",[t._v("no tracking information")]),t._v("，那就说明本地仓库和远程仓库的分支没有做关联。")]),t._v(" "),a("h5",{attrs:{id:"将本地仓库的分支和远程仓库分支做关联"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#将本地仓库的分支和远程仓库分支做关联"}},[t._v("#")]),t._v(" 将本地仓库的分支和远程仓库分支做关联")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch --set-upstream-to"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("origin/"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("branch"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" dev\n")])])])])}),[],!1,null,null,null);s.default=n.exports}}]);