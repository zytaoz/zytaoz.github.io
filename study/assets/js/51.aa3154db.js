(window.webpackJsonp=window.webpackJsonp||[]).push([[51],{411:function(t,e,r){"use strict";r.r(e);var o=r(49),a=Object(o.a)({},(function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"react-生命周期"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#react-生命周期"}},[t._v("#")]),t._v(" React 生命周期")]),t._v(" "),r("p",[r("a",{attrs:{href:"http://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/",target:"_blank",rel:"noopener noreferrer"}},[t._v("生命周期图谱"),r("OutboundLink")],1)]),t._v(" "),r("p",[t._v("以下是按照顺序来写的。")]),t._v(" "),r("h2",{attrs:{id:"挂载时"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#挂载时"}},[t._v("#")]),t._v(" 挂载时")]),t._v(" "),r("h3",{attrs:{id:"constructor"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#constructor"}},[t._v("#")]),t._v(" constructor")]),t._v(" "),r("p",[t._v("严格来说 "),r("code",[t._v("constructor")]),t._v(" 并不属于 "),r("code",[t._v("React")]),t._v(" 生命周期中的一个，因为他是 "),r("code",[t._v("javascript")]),t._v(" 的 "),r("code",[t._v("class")]),t._v(" 语法糖中的一个方法。")]),t._v(" "),r("p",[t._v("他在组件被挂载时立即执行，"),r("code",[t._v("state")]),t._v(" 就是在这里面定义的。如果不需要定义 "),r("code",[t._v("state")]),t._v(" 的话，你可以不写 "),r("code",[t._v("constructor")])]),t._v(" "),r("h3",{attrs:{id:"componentdidmount"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#componentdidmount"}},[t._v("#")]),t._v(" componentDidMount")]),t._v(" "),r("p",[r("code",[t._v("componentDidMount()")]),t._v(" 会在组件挂载后（插入 "),r("code",[t._v("DOM")]),t._v(" 树中）立即调用。依赖于 "),r("code",[t._v("DOM")]),t._v(" 节点的初始化应该放在这里。如需通过网络请求获取数据，此处是实例化请求的好地方。")])])}),[],!1,null,null,null);e.default=a.exports}}]);